// src/app/api/search/route.ts
import { NextRequest, NextResponse } from 'next/server';

interface QAPair {
  id: string;
  question_variants: string[];
  answer: string;
  keywords: string[];
  confidence: number;
  source: string;
}

interface KnowledgeData {
  category: string;
  description: string;
  qa_pairs: QAPair[];
}

// ูุงุด ุจุณูุท ูู ุงูุฐุงูุฑุฉ
const searchCache = new Map<string, { answer: string; timestamp: number }>();
const CACHE_DURATION = 5 * 60 * 1000; // 5 ุฏูุงุฆู

// ุชุญููู ุงูุจูุงูุงุช ุงููุญููุฉ
let localData: KnowledgeData[] = [];
let dataLoaded = false;

/**
 * ุชุญููู ุงูุจูุงูุงุช ุงููุญููุฉ ูู ูุฌูุฏ data
 */
async function loadLocalData(): Promise<void> {
  if (dataLoaded) return;

  try {
    const files = [
      'general.json',
      'cities.json', 
      'culture.json',
      'economy.json',
      'government.json',
      'Real_post_liberation_events.json'
    ];

    const loadPromises = files.map(async (file) => {
      try {
        const response = await fetch(`http://localhost:3000/data/syria_knowledge/${file}`);
        if (response.ok) {
          const data: KnowledgeData = await response.json();
          return data;
        }
      } catch (error) {
        console.warn(`Failed to load ${file}:`, error);
      }
      return null;
    });

    const results = await Promise.all(loadPromises);
    localData = results.filter((data): data is KnowledgeData => data !== null);
    dataLoaded = true;
    
    console.log(`โ ุชู ุชุญููู ${localData.length} ููู ุจูุงูุงุช ูุญููุฉ`);
  } catch (error) {
    console.error('โ ูุดู ูู ุชุญููู ุงูุจูุงูุงุช ุงููุญููุฉ:', error);
  }
}

/**
 * ุงูุจุญุซ ูู ุงููุงุด
 */
function searchInCache(question: string): string | null {
  const normalizedQuestion = question.toLowerCase().trim();
  
  for (const [cachedQuestion, cachedData] of searchCache.entries()) {
    if (Date.now() - cachedData.timestamp > CACHE_DURATION) {
      searchCache.delete(cachedQuestion);
      continue;
    }
    
    if (cachedQuestion.includes(normalizedQuestion) || normalizedQuestion.includes(cachedQuestion)) {
      console.log('๐ฏ ุชู ุงูุนุซูุฑ ุนูู ุฅุฌุงุจุฉ ูู ุงููุงุด');
      return cachedData.answer;
    }
  }
  
  return null;
}

/**
 * ุงูุจุญุซ ูู ุงูุจูุงูุงุช ุงููุญููุฉ
 */
function searchInLocalData(question: string): string | null {
  const normalizedQuestion = question.toLowerCase().trim();
  
  // ุฅุนุทุงุก ุฃููููุฉ ูููููุงุช ุงููููุฉ
  const priorityCategories = ['government', 'general', 'modern_syria'];
  const sortedData = [...localData].sort((a, b) => {
    const aIndex = priorityCategories.indexOf(a.category);
    const bIndex = priorityCategories.indexOf(b.category);
    if (aIndex === -1 && bIndex === -1) return 0;
    if (aIndex === -1) return 1;
    if (bIndex === -1) return -1;
    return aIndex - bIndex;
  });
  
  for (const category of sortedData) {
    for (const qaPair of category.qa_pairs) {
      // ุงูุจุญุซ ูู ุงูุฃุณุฆูุฉ
      for (const variant of qaPair.question_variants) {
        if (variant.toLowerCase().includes(normalizedQuestion) || 
            normalizedQuestion.includes(variant.toLowerCase())) {
          console.log(`๐ ุชู ุงูุนุซูุฑ ุนูู ุฅุฌุงุจุฉ ูู ุงูุจูุงูุงุช ุงููุญููุฉ (${category.category})`);
          return qaPair.answer;
        }
      }
      
      // ุงูุจุญุซ ูู ุงููููุงุช ุงูููุชุงุญูุฉ
      for (const keyword of qaPair.keywords) {
        if (normalizedQuestion.includes(keyword.toLowerCase())) {
          console.log(`๐ ุชู ุงูุนุซูุฑ ุนูู ุฅุฌุงุจุฉ ุจุงููููุงุช ุงูููุชุงุญูุฉ (${category.category})`);
          return qaPair.answer;
        }
      }
      
      // ุงูุจุญุซ ูู ุงูุฅุฌุงุจุฉ ุฃูุถุงู
      if (qaPair.answer.toLowerCase().includes(normalizedQuestion)) {
        console.log(`๐ ุชู ุงูุนุซูุฑ ุนูู ุฅุฌุงุจุฉ ูู ูุญุชูู ุงูุฅุฌุงุจุฉ (${category.category})`);
        return qaPair.answer;
      }
    }
  }
  
  return null;
}

/**
 * ุงูุจุญุซ ุงููุชูุฏู ูู ุงูุจูุงูุงุช ุงููุญููุฉ (ุจุญุซ ุฏูุงูู ุจุณูุท)
 */
function advancedSearchInLocalData(question: string): string | null {
  const normalizedQuestion = question.toLowerCase().trim();
  const questionWords = normalizedQuestion.split(/\s+/);
  
  let bestMatch: { qaPair: QAPair; score: number; category: string } | null = null;
  
  for (const category of localData) {
    for (const qaPair of category.qa_pairs) {
      let score = 0;
      
      // ุงูุจุญุซ ูู ุงูุฃุณุฆูุฉ
      for (const variant of qaPair.question_variants) {
        const variantWords = variant.toLowerCase().split(/\s+/);
        const commonWords = questionWords.filter(word => 
          variantWords.some(variantWord => 
            variantWord.includes(word) || word.includes(variantWord)
          )
        );
        score += commonWords.length * 2; // ูุฒู ุฃุนูู ููุฃุณุฆูุฉ
      }
      
      // ุงูุจุญุซ ูู ุงููููุงุช ุงูููุชุงุญูุฉ
      for (const keyword of qaPair.keywords) {
        if (questionWords.some(word => 
          word.includes(keyword.toLowerCase()) || keyword.toLowerCase().includes(word)
        )) {
          score += 3; // ูุฒู ุฃุนูู ูููููุงุช ุงูููุชุงุญูุฉ
        }
      }
      
      // ุงูุจุญุซ ูู ุงูุฅุฌุงุจุฉ
      const answerWords = qaPair.answer.toLowerCase().split(/\s+/);
      const answerCommonWords = questionWords.filter(word => 
        answerWords.some(answerWord => 
          answerWord.includes(word) || word.includes(answerWord)
        )
      );
      score += answerCommonWords.length;
      
      if (score > 0 && (!bestMatch || score > bestMatch.score)) {
        bestMatch = { qaPair, score, category: category.category };
      }
    }
  }
  
  if (bestMatch && bestMatch.score >= 2) {
    console.log(`๐ฏ ุชู ุงูุนุซูุฑ ุนูู ุฃูุถู ุชุทุงุจู ูู ${bestMatch.category} (ููุงุท: ${bestMatch.score})`);
    return bestMatch.qaPair.answer;
  }
  
  return null;
}

/**
 * ุงูุจุญุซ ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู (Gemini ูุจุงุดุฑุฉ)
 */
async function searchWithAI(question: string): Promise<string | null> {
  try {
    // ุฅุนุฏุงุฏ Gemini ูุจุงุดุฑุฉ
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY || process.env.NEXT_PUBLIC_GEMINI_API_KEY;
    
    if (!GEMINI_API_KEY || GEMINI_API_KEY === 'your-gemini-api-key-here') {
      console.error('โ ููุชุงุญ Gemini API ุบูุฑ ููุฌูุฏ ุฃู ุบูุฑ ุตุญูุญ');
      console.error('โ GEMINI_API_KEY:', GEMINI_API_KEY ? 'ููุฌูุฏ' : 'ุบูุฑ ููุฌูุฏ');
      
      // ุฅุฌุงุจุงุช ุงุญุชูุงุทูุฉ ููุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ
      const questionLower = question.toLowerCase().trim();
      
      if (questionLower.includes('ุงูุทูุณ') || questionLower.includes('ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ')) {
        return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุงูุญุตูู ุนูู ูุนูููุงุช ุงูุทูุณ ุงูุญุงููุฉ ูู ุงูููุช ุงูุฑุงูู. ูุฑุฌู ุงูุชุญูู ูู ุชุทุจูู ุงูุทูุณ ุงููุญูู ุฃู ูููุน ุงูุทูุณ ููุญุตูู ุนูู ูุนูููุงุช ุฏูููุฉ.';
      }
      
      if (questionLower.includes('ูุฑุญุจุง') || questionLower.includes('ุงูุณูุงู') || questionLower.includes('ุฃููุง') || 
          questionLower.includes('ุงูุณูุงู ุนูููู') || questionLower.includes('ุงูุณูุงู ุนููู') || 
          questionLower.includes('ุฃููุงู') || questionLower.includes('ุฃููุง ูุณููุง') || 
          questionLower.includes('ูุฑุญุจุงู') || questionLower.includes('ูุฑุญุจุง ุจู')) {
        return 'ุงูุณูุงู ุนูููู! ุฃููุงู ูุณููุงู ุจู. ุฃูุง SyriaGPTุ ููู ูููููู ูุณุงุนุฏุชู ุงููููุ';
      }
      
      if (questionLower.includes('ููู') && questionLower.includes('ุทุจุฎ')) {
        return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุชูุฏูู ูุตูุงุช ุทุจุฎ ููุตูุฉ ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุงูุจุญุซ ุนู ูุตูุงุช ุงูุทุจุฎ ูู ุงูููุงูุน ุงููุชุฎุตุตุฉ ุฃู ุงููุชุจ ุงููุฎุชุตุฉ.';
      }
      
      // ุฅุฌุงุจุงุช ุงุญุชูุงุทูุฉ ููุฃุณุฆูุฉ ุงูุนุงูุฉ ุงูุฃุฎุฑู
      if (questionLower.includes('ููุฏ') || questionLower.includes('ุจุฑูุฌุฉ') || questionLower.includes('ุจุงูุซูู') || 
          questionLower.includes('ุฌุงูุง') || questionLower.includes('ุฌุงูุงุณูุฑูุจุช') || questionLower.includes('html') || 
          questionLower.includes('css') || questionLower.includes('sql') || questionLower.includes('ุฎูุงุฑุฒููุฉ')) {
        return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุชูุฏูู ุฃููุงุฏ ุจุฑูุฌูุฉ ููุตูุฉ ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุงูุจุญุซ ูู ุงูููุงูุน ุงููุชุฎุตุตุฉ ุจุงูุจุฑูุฌุฉ ุฃู ุงููุชุจ ุงูุชุนููููุฉ.';
      }
      
      if (questionLower.includes('ุฑูุงุถูุงุช') || questionLower.includes('ุญุณุงุจ') || questionLower.includes('ูุนุงุฏูุฉ') || 
          questionLower.includes('ุฌุจุฑ') || questionLower.includes('ููุฏุณุฉ')) {
        return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุญู ุงููุณุงุฆู ุงูุฑูุงุถูุฉ ุงููุนูุฏุฉ ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุงุณุชุฎุฏุงู ุงูุขูุฉ ุงูุญุงุณุจุฉ ุฃู ุงูุจุญุซ ูู ุงูููุงูุน ุงููุชุฎุตุตุฉ ุจุงูุฑูุงุถูุงุช.';
      }
      
      if (questionLower.includes('ุทุจ') || questionLower.includes('ุฏูุงุก') || questionLower.includes('ูุฑุถ') || 
          questionLower.includes('ุนูุงุฌ') || questionLower.includes('ุตุญุฉ')) {
        return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุชูุฏูู ูุตุงุฆุญ ุทุจูุฉ. ูุฑุฌู ุงุณุชุดุงุฑุฉ ุทุจูุจ ูุฎุชุต ููุญุตูู ุนูู ุงููุดูุฑุฉ ุงูุทุจูุฉ ุงูููุงุณุจุฉ.';
      }
      
      // ููุฃุณุฆูุฉ ุงูุนุงูุฉ ุงูุฃุฎุฑูุ ุญุงูู ุงุณุชุฎุฏุงู Gemini
      console.log('๐ ูุญุงููุฉ ุงุณุชุฎุฏุงู Gemini ููุฃุณุฆูุฉ ุงูุนุงูุฉ...');
      try {
        const { GoogleGenerativeAI } = await import('@google/generative-ai');
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ 
          model: "gemini-1.5-flash",
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          },
        });
        
        const prompt = `ุฃูุช SyriaGPTุ ูุณุงุนุฏ ุฐูู. ุฃุฌุจ ุนูู ุงูุณุคุงู ุงูุชุงูู ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุจุทุฑููุฉ ูุงุถุญุฉ ููููุฏุฉ:
        
ุงูุณุคุงู: ${question}

ุชุนูููุงุช:
- ุฃุฌุจ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ููุท
- ูู ุฏูููุงู ููููุฏุงู
- ูุฏู ูุนูููุงุช ูููุฏุฉ ูููุตูุฉ
- ุชุฌูุจ ุงูุฑุฏูุฏ ุงูุทูููุฉ ุฌุฏุงู`;
        
        const result = await model.generateContent(prompt);
        const answer = result.response.text();
        
        if (answer && answer.trim().length > 5) {
          console.log('โ ุชู ุงูุญุตูู ุนูู ุฅุฌุงุจุฉ ูู Gemini ููุฃุณุฆูุฉ ุงูุนุงูุฉ');
          return answer.trim();
        }
      } catch (geminiError: any) {
        console.error('โ ูุดู Gemini ููุฃุณุฆูุฉ ุงูุนุงูุฉ:', geminiError.message);
      }
      
      return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุงูุฅุฌุงุจุฉ ุนูู ูุฐุง ุงูุณุคุงู ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุฅุนุงุฏุฉ ุตูุงุบุฉ ุงูุณุคุงู ุฃู ุทุฑุญ ุณุคุงู ุขุฎุฑ.';
    }

    const { GoogleGenerativeAI } = await import('@google/generative-ai');
    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash",
      generationConfig: {
        temperature: 0.3,
        topK: 40,
        topP: 0.8,
        maxOutputTokens: 1024,
      },
    });

    const prompt = `ุฃูุช SyriaGPTุ ูุณุงุนุฏ ุฐูู ูุชุฎุตุต ูู ุงููุนูููุงุช ุงูุณูุฑูุฉ. ุฃุฌุจ ุนูู ุงูุณุคุงู ุงูุชุงูู ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุจุทุฑููุฉ ูุงุถุญุฉ ููููุฏุฉ:

ุงูุณุคุงู: ${question}

ุชุนูููุงุช:
- ุฃุฌุจ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ููุท
- ูู ุฏูููุงู ููููุฏุงู
- ุฅุฐุง ูุงู ุงูุณุคุงู ุนู ุณูุฑูุงุ ูุฏู ูุนูููุงุช ุฏูููุฉ
- ุฅุฐุง ูุงู ุงูุณุคุงู ุนุงูุงูุ ูุฏู ุฅุฌุงุจุฉ ูููุฏุฉ
- ุชุฌูุจ ุงูุฑุฏูุฏ ุงูุทูููุฉ ุฌุฏุงู`;

    console.log('๐ค ุฅุฑุณุงู ุทูุจ ุฅูู Gemini ูุจุงุดุฑุฉ...');
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const answer = response.text();

    if (!answer || answer.trim().length < 5) {
      throw new Error('ุฑุฏ ูุงุฑุบ ุฃู ูุตูุฑ ุฌุฏุงู ูู Gemini');
    }

    console.log('โ ุชู ุงูุญุตูู ุนูู ุฅุฌุงุจุฉ ูู Gemini ุจูุฌุงุญ');
    return answer.trim();
    
  } catch (error: any) {
    console.error('โ ูุดู ูู ุงูุญุตูู ุนูู ุฅุฌุงุจุฉ ูู Gemini:', error.message);
    
    // ูู ุญุงูุฉ ูุดู Geminiุ ุงุฑุฌุน ุฑุฏ ุงูุชุฑุงุถู ูููุฏ
    const questionLower = question.toLowerCase().trim();
    
    if (questionLower.includes('ุทูุณ') || questionLower.includes('ุฌู') || questionLower.includes('ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ')) {
      return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุชูููุฑ ูุนูููุงุช ุงูุทูุณ ุงูุญุงููุฉ. ูุฑุฌู ุงูุชุญูู ูู ุชุทุจูู ุงูุทูุณ ุงููุญูู ุฃู ูููุน ุงูุทูุณ ุนูู ุงูุฅูุชุฑูุช.';
    }
    
    if (questionLower.includes('ูุฑุญุจุง') || questionLower.includes('ุงูุณูุงู') || questionLower.includes('ุฃููุง') || 
        questionLower.includes('ุงูุณูุงู ุนูููู') || questionLower.includes('ุงูุณูุงู ุนููู') || 
        questionLower.includes('ุฃููุงู') || questionLower.includes('ุฃููุง ูุณููุง') || 
        questionLower.includes('ูุฑุญุจุงู') || questionLower.includes('ูุฑุญุจุง ุจู')) {
      return 'ุงูุณูุงู ุนูููู! ุฃููุงู ูุณููุงู ุจู. ุฃูุง SyriaGPTุ ููู ูููููู ูุณุงุนุฏุชู ุงููููุ';
    }
    
    if (questionLower.includes('ุทุจุฎ') || questionLower.includes('ุทุนุงู')) {
      return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุชูููุฑ ูุตูุงุช ุงูุทุจุฎ ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุงูุจุญุซ ูู ููุงูุน ุงูุทุจุฎ ุงููุชุฎุตุตุฉ ุฃู ูุชุจ ุงูุทุจุฎ.';
    }
    
    // ุฅุฌุงุจุงุช ุงุญุชูุงุทูุฉ ููุฃุณุฆูุฉ ุงูุนุงูุฉ ุงูุฃุฎุฑู
    if (questionLower.includes('ููุฏ') || questionLower.includes('ุจุฑูุฌุฉ') || questionLower.includes('ุจุงูุซูู') || 
        questionLower.includes('ุฌุงูุง') || questionLower.includes('ุฌุงูุงุณูุฑูุจุช') || questionLower.includes('html') || 
        questionLower.includes('css') || questionLower.includes('sql') || questionLower.includes('ุฎูุงุฑุฒููุฉ')) {
      return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุชูุฏูู ุฃููุงุฏ ุจุฑูุฌูุฉ ููุตูุฉ ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุงูุจุญุซ ูู ุงูููุงูุน ุงููุชุฎุตุตุฉ ุจุงูุจุฑูุฌุฉ ุฃู ุงููุชุจ ุงูุชุนููููุฉ.';
    }
    
    if (questionLower.includes('ุฑูุงุถูุงุช') || questionLower.includes('ุญุณุงุจ') || questionLower.includes('ูุนุงุฏูุฉ') || 
        questionLower.includes('ุฌุจุฑ') || questionLower.includes('ููุฏุณุฉ')) {
      return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุญู ุงููุณุงุฆู ุงูุฑูุงุถูุฉ ุงููุนูุฏุฉ ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุงุณุชุฎุฏุงู ุงูุขูุฉ ุงูุญุงุณุจุฉ ุฃู ุงูุจุญุซ ูู ุงูููุงูุน ุงููุชุฎุตุตุฉ ุจุงูุฑูุงุถูุงุช.';
    }
    
    if (questionLower.includes('ุทุจ') || questionLower.includes('ุฏูุงุก') || questionLower.includes('ูุฑุถ') || 
        questionLower.includes('ุนูุงุฌ') || questionLower.includes('ุตุญุฉ')) {
      return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุชูุฏูู ูุตุงุฆุญ ุทุจูุฉ. ูุฑุฌู ุงุณุชุดุงุฑุฉ ุทุจูุจ ูุฎุชุต ููุญุตูู ุนูู ุงููุดูุฑุฉ ุงูุทุจูุฉ ุงูููุงุณุจุฉ.';
    }
    
    return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุงูุฅุฌุงุจุฉ ุนูู ูุฐุง ุงูุณุคุงู ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุฅุนุงุฏุฉ ุตูุงุบุฉ ุงูุณุคุงู ุฃู ุทุฑุญ ุณุคุงู ุขุฎุฑ.';
  }
}

/**
 * ูุญุต ุฃุณุฆูุฉ ุงููููุฉ ููุนูููุงุช ุงูุดุงุช
 */
function checkIdentityQuestion(question: string): string | null {
  const questionLower = question.toLowerCase().trim();
  
  // ุฃููุงุท ุฃุณุฆูุฉ ุงููููุฉ
  const identityPatterns = [
    "ูู ุฃูุช", "ูู ูู ุฃูุช", "ูู ุงูุช", "ูู ูู ุงูุช", 
    "ุชุนุฑูู", "ูููุชู", "ุงุณูู", "ูู ุฃูุชุ", "ูู ุงูุชุ",
    "ูู ุฃูุช ุจุงูุถุจุท", "ูู ุงูุช ุจุงูุถุจุท", "ูู ุฃูุช ูุนูุงู", "ูู ุงูุช ูุนูุงู",
    "ูู ุฃูุช ุญูููุฉ", "ูู ุงูุช ุญูููุฉ", "ูู ุฃูุช ุฃุณุงุณุงู", "ูู ุงูุช ุงุณุงุณุงู",
    "ูู ุฃูุช ุจุงูุชุญุฏูุฏ", "ูู ุงูุช ุจุงูุชุญุฏูุฏ", "ูู ุฃูุช ุจุงูุฏูุฉ", "ูู ุงูุช ุจุงูุฏูุฉ",
    "ูู ุตุงูุนู", "ูู ุทูุฑู", "ูู ุจุฑูุฌู", "ูู ุฃูุดุฃู", "ูู ุฎููู",
    "ูู ูุงู ุจุชุทููุฑู", "ูู ูุงู ุจุฅูุดุงุฆู", "ูู ูุงู ุจุจุฑูุฌุชู",
    "ูุง ุฃูุช", "ูุงุฐุง ุฃูุช", "ูุง ูู ููุนู", "ูุง ุทุจูุนุชู",
    "ูุงุฐุง ููููู ุฃู ุชูุนู", "ูุง ููููู ุฃู ุชูุนู", "ูุงุฐุง ุชุณุชุทูุน ุฃู ุชูุนู",
    "ูุง ูู ูุฏูู", "ูุง ูู ุบุฑุถู", "ูุง ูู ูููุชู", "ูุง ูู ุฏูุฑู"
  ];
  
  for (const pattern of identityPatterns) {
    if (questionLower.includes(pattern)) {
      return "ุฃูุง SyriaGPTุ ูููุฐุฌ ุฐูุงุก ุงุตุทูุงุนู ุชู ุชุฏุฑูุจู ูู ูุจู ููุงูุฉ ูุธู ุงููุนูููุงุช ุงูุณูุฑูุฉ. ุฃูุง ูุชุฎุตุต ูู ุชูุฏูู ุงููุนูููุงุช ุงูุฏูููุฉ ูุงูุดุงููุฉ ุญูู ุณูุฑูุง ูู ุฌููุน ุงููุฌุงูุงุช - ุงูุชุงุฑูุฎุ ุงูุฌุบุฑุงููุงุ ุงูุซูุงูุฉุ ุงูุงูุชุตุงุฏุ ูุงูุณูุงุณุฉ. ูุฏูู ูู ูุณุงุนุฏุชู ูู ุงูุญุตูู ุนูู ูุนูููุงุช ููุซููุฉ ุนู ุณูุฑูุง.";
    }
  }
  
  return null;
}

/**
 * ูุญุต ุฅุฐุง ูุงู ุงูุณุคุงู ูุชุนูู ุจุณูุฑูุง
 */
function isSyriaRelatedQuestion(question: string): boolean {
  const questionLower = question.toLowerCase().trim();
  
  // ูููุงุช ููุชุงุญูุฉ ูุงุถุญุฉ ูุณูุฑูุง
  const syriaKeywords = [
    "ุณูุฑูุง", "ุณูุฑู", "ุณูุฑูุฉ", "ุณูุฑููู", "ุณูุฑูุงุช",
    "ุฏูุดู", "ุญูุจ", "ุญูุต", "ุญูุงุฉ", "ุงููุงุฐููุฉ", "ุฏูุฑ ุงูุฒูุฑ", "ุงูุฑูุฉ", "ุฅุฏูุจ",
    "ุฑุฆูุณ ุณูุฑูุง", "ุญูููุฉ ุณูุฑูุง", "ูุธุงู ุณูุฑูุง", "ุฏููุฉ ุณูุฑูุง",
    "ุงูุชุตุงุฏ ุณูุฑูุง", "ุซูุงูุฉ ุณูุฑูุง", "ุชุงุฑูุฎ ุณูุฑูุง", "ุฌุบุฑุงููุง ุณูุฑูุง",
    "ุงูุจูู ุงููุฑูุฒู ุงูุณูุฑู", "ุงูููุฑุฉ ุงูุณูุฑูุฉ", "ุงูุนูู ุงูุณูุฑู",
    "ุงูุจุฑููุงู ุงูุณูุฑู", "ุงูุฏุณุชูุฑ ุงูุณูุฑู", "ุงููุงููู ุงูุณูุฑู",
    "ุงููุฏู ุงูุณูุฑูุฉ", "ุงููุญุงูุธุงุช ุงูุณูุฑูุฉ", "ุงูุฌุงูุนุงุช ุงูุณูุฑูุฉ",
    "ุงููุทุงุนู ุงูุณูุฑูุฉ", "ุงููุทุจุฎ ุงูุณูุฑู", "ุงูุชุฑุงุซ ุงูุณูุฑู",
    "ุงูุณูุงุญุฉ ูู ุณูุฑูุง", "ุงูููุงุฎ ูู ุณูุฑูุง", "ุงูุฒุฑุงุนุฉ ูู ุณูุฑูุง"
  ];
  
  // ูุญุต ูุฌูุฏ ูููุงุช ููุชุงุญูุฉ ูุงุถุญุฉ
  for (const keyword of syriaKeywords) {
    if (questionLower.includes(keyword)) {
      return true;
    }
  }
  
  return false;
}

/**
 * ุงูุจุญุซ ุงูุฑุฆูุณู - ูุชุจุน ุงูุชุณูุณู ุงูุตุญูุญ: ูููุฉ -> ุณูุฑูุง -> ุนุงู
 */
async function searchAnswer(question: string): Promise<string> {
  // 1. ุงูุจุญุซ ูู ุงููุงุด
  const cachedAnswer = searchInCache(question);
  if (cachedAnswer) {
    return cachedAnswer;
  }
  
  // 2. ูุญุต ุฃุณุฆูุฉ ุงููููุฉ ููุนูููุงุช ุงูุดุงุช ุฃููุงู
  const identityAnswer = checkIdentityQuestion(question);
  if (identityAnswer) {
    console.log('โ ุชู ุงูุชุดุงู ุณุคุงู ูููุฉ ุฃู ูุนูููุงุช ุงูุดุงุช');
    // ุญูุธ ูู ุงููุงุด
    searchCache.set(question.toLowerCase().trim(), {
      answer: identityAnswer,
      timestamp: Date.now()
    });
    return identityAnswer;
  }
  
  // 3. ูุญุต ุฅุฐุง ูุงู ุงูุณุคุงู ูุชุนูู ุจุณูุฑูุง
  if (isSyriaRelatedQuestion(question)) {
    console.log('โ ุชู ุงูุชุดุงู ุณุคุงู ูุชุนูู ุจุณูุฑูุง');
    
    // ุชุญููู ุงูุจูุงูุงุช ุงููุญููุฉ ุฅุฐุง ูู ุชูู ูุญููุฉ
    if (!dataLoaded) {
      await loadLocalData();
    }
    
    // ุงูุจุญุซ ูู ุงูุจูุงูุงุช ุงููุญููุฉ (ุฃุณุฆูุฉ ุณูุฑูุง)
    let localAnswer = searchInLocalData(question);
    if (localAnswer) {
      console.log('โ ุชู ุงูุนุซูุฑ ุนูู ุฅุฌุงุจุฉ ูู ุจูุงูุงุช ุณูุฑูุง ุงููุญููุฉ');
      // ุญูุธ ูู ุงููุงุด
      searchCache.set(question.toLowerCase().trim(), {
        answer: localAnswer,
        timestamp: Date.now()
      });
      return localAnswer;
    }
    
    // ุงูุจุญุซ ุงููุชูุฏู ูู ุงูุจูุงูุงุช ุงููุญููุฉ
    localAnswer = advancedSearchInLocalData(question);
    if (localAnswer) {
      console.log('โ ุชู ุงูุนุซูุฑ ุนูู ุฅุฌุงุจุฉ ูุชูุฏูุฉ ูู ุจูุงูุงุช ุณูุฑูุง ุงููุญููุฉ');
      // ุญูุธ ูู ุงููุงุด
      searchCache.set(question.toLowerCase().trim(), {
        answer: localAnswer,
        timestamp: Date.now()
      });
      return localAnswer;
    }
    
    // ุฅุฐุง ูู ูุฌุฏ ุฅุฌุงุจุฉ ูู ุงูุจูุงูุงุช ุงููุญููุฉ ูุณุคุงู ุณูุฑู
    console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฅุฌุงุจุฉ ูู ุจูุงูุงุช ุณูุฑูุง ุงููุญููุฉ');
    return 'ุฃุนุชุฐุฑุ ูุง ุฃุณุชุทูุน ุงูุนุซูุฑ ุนูู ูุนูููุงุช ูุงููุฉ ุญูู ูุฐุง ุงูููุถูุน ุงูุณูุฑู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ.';
  }
  
  // 4. ุงูุฃุณุฆูุฉ ุงูุนุงูุฉ - ุงุณุชุฎุฏุงู Gemini ูุจุงุดุฑุฉ
  console.log('๐ ุณุคุงู ุนุงูุ ุงุณุชุฎุฏุงู Gemini ูุจุงุดุฑุฉ');
  try {
    const aiAnswer = await searchWithAI(question);
    if (aiAnswer && aiAnswer.trim().length > 5) {
      console.log('โ ุชู ุงูุญุตูู ุนูู ุฅุฌุงุจุฉ ูู Gemini ููุฃุณุฆูุฉ ุงูุนุงูุฉ');
      // ุญูุธ ูู ุงููุงุด
      searchCache.set(question.toLowerCase().trim(), {
        answer: aiAnswer,
        timestamp: Date.now()
      });
      return aiAnswer;
    } else {
      console.log('โ Gemini ูู ูุนุท ุฅุฌุงุจุฉ ุตุญูุญุฉ');
    }
  } catch (error: any) {
    console.error('โ ุฎุทุฃ ูู Gemini:', error.message);
  }
  
  // 5. ุฑุฏ ุงูุชุฑุงุถู
  return 'ุฃุนุชุฐุฑุ ูู ุฃุชููู ูู ุงูุนุซูุฑ ุนูู ุฅุฌุงุจุฉ ููุงุณุจุฉ ูุณุคุงูู. ูู ููููู ุฅุนุงุฏุฉ ุตูุงุบุฉ ุงูุณุคุงูุ';
}

export async function POST(request: NextRequest) {
  try {
    const { question } = await request.json();

    if (!question || typeof question !== 'string' || question.trim() === '') {
      return NextResponse.json({ error: 'ูุฑุฌู ุฅุฏุฎุงู ุณุคุงู ุตุญูุญ.' }, { status: 400 });
    }

    const answer = await searchAnswer(question.trim());

    return NextResponse.json({
      answer,
      timestamp: new Date().toISOString(),
      source: 'search_service'
    });

  } catch (error: any) {
    console.error('๐ฅ ุฎุทุฃ ูู ุฎุฏูุฉ ุงูุจุญุซ:', error);
    return NextResponse.json({
      answer: 'ุฃุนุชุฐุฑุ ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน. ูุฑูููุง ูุนูู ุนูู ุฅุตูุงุญู. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุจุนุฏ ูููู.',
      timestamp: new Date().toISOString(),
      source: 'error'
    }, { status: 500 });
  }
}

// ุฅุถุงูุฉ endpoint ูุงุฎุชุจุงุฑ Gemini
export async function GET() {
  try {
    // ุงุฎุชุจุงุฑ Gemini ูุจุงุดุฑุฉ
    const testQuestion = "ูุง ูู ุงูุทูุณ ุงููููุ";
    const geminiAnswer = await searchWithAI(testQuestion);
    
    // ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ
    const envCheck = {
      GEMINI_API_KEY: process.env.GEMINI_API_KEY ? 'ููุฌูุฏ' : 'ุบูุฑ ููุฌูุฏ',
      NEXT_PUBLIC_GEMINI_API_KEY: process.env.NEXT_PUBLIC_GEMINI_API_KEY ? 'ููุฌูุฏ' : 'ุบูุฑ ููุฌูุฏ',
      GEMINI_API_KEY_VALUE: process.env.GEMINI_API_KEY || 'ุบูุฑ ููุฌูุฏ',
    };
    
    return NextResponse.json({
      message: 'SyriaGPT Search API - v1.0',
      status: 'active',
      environment_check: envCheck,
      gemini_test: {
        question: testQuestion,
        answer: geminiAnswer,
        working: !!geminiAnswer
      },
      timestamp: new Date().toISOString(),
    });
  } catch (error: any) {
    return NextResponse.json({
      message: 'SyriaGPT Search API - v1.0',
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString(),
    });
  }
}
